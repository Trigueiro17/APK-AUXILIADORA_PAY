// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(EMPLOYEE)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  cashSessions      CashSession[]
  cashRegisters     CashRegister[]
  sales             Sale[]
  consolidatedData  ConsolidatedData[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  barcode     String?  @unique
  category    String?
  stock       Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  saleItems SaleItem[]

  @@map("products")
}

model CashSession {
  id              String            @id @default(cuid())
  userId          String
  sessionName     String            // Ex: "Caixa João - 26/01/2025"
  openingAmount   Decimal           @db.Decimal(10, 2)
  closingAmount   Decimal?          @db.Decimal(10, 2)
  status          CashSessionStatus @default(ACTIVE)
  openedAt        DateTime          @default(now())
  closedAt        DateTime?
  notes           String?
  isConsolidated  Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relacionamentos
  user              User               @relation(fields: [userId], references: [id])
  cashRegisters     CashRegister[]
  consolidatedData  ConsolidatedData?
  
  @@map("cash_sessions")
}

model CashRegister {
  id              String            @id @default(cuid())
  userId          String
  cashSessionId   String            // Nova relação com sessão
  openingAmount   Decimal           @db.Decimal(10, 2)
  closingAmount   Decimal?          @db.Decimal(10, 2)
  status          CashRegisterStatus @default(OPEN)
  openedAt        DateTime          @default(now())
  closedAt        DateTime?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relacionamentos
  user          User         @relation(fields: [userId], references: [id])
  cashSession   CashSession  @relation(fields: [cashSessionId], references: [id])
  sales         Sale[]

  @@map("cash_registers")
}

model ConsolidatedData {
  id              String      @id @default(cuid())
  cashSessionId   String      @unique
  userId          String
  totalSales      Decimal     @db.Decimal(10, 2)
  totalCash       Decimal     @db.Decimal(10, 2)
  totalCard       Decimal     @db.Decimal(10, 2)
  totalPix        Decimal     @db.Decimal(10, 2)
  salesCount      Int
  openingAmount   Decimal     @db.Decimal(10, 2)
  closingAmount   Decimal     @db.Decimal(10, 2)
  consolidatedAt  DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relacionamentos
  cashSession     CashSession @relation(fields: [cashSessionId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  
  @@map("consolidated_data")
}

model Sale {
  id             String        @id @default(cuid())
  userId         String
  cashRegisterId String
  totalAmount    Decimal       @db.Decimal(10, 2)
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus @default(PENDING)
  pixQrCode      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relacionamentos
  user         User         @relation(fields: [userId], references: [id])
  cashRegister CashRegister @relation(fields: [cashRegisterId], references: [id])
  items        SaleItem[]

  @@map("sales")
}

model SaleItem {
  id        String  @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  // Relacionamentos
  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum CashSessionStatus {
  ACTIVE
  CLOSED
  CONSOLIDATED
}

enum CashRegisterStatus {
  OPEN
  CLOSED
}

enum PaymentMethod {
  PIX
  DEBIT_CARD
  CREDIT_CARD
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
