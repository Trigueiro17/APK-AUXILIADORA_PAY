"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/use-dashboard-data.ts":
/*!*****************************************!*\
  !*** ./src/hooks/use-dashboard-data.ts ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAPIHealth: function() { return /* binding */ useAPIHealth; },\n/* harmony export */   useConnectionStatus: function() { return /* binding */ useConnectionStatus; },\n/* harmony export */   useDashboardData: function() { return /* binding */ useDashboardData; }\n/* harmony export */ });\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/modern/useQuery.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_dashboard_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/dashboard-service */ \"(app-pages-browser)/./src/lib/dashboard-service.ts\");\n/* __next_internal_client_entry_do_not_use__ useDashboardData,useConnectionStatus,useAPIHealth auto */ \n\n\nfunction useDashboardData() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const { refetchInterval = 30000, enabled = true, staleTime = 5 * 60 * 1000, cacheTime = 10 * 60 * 1000 } = options;\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.useQueryClient)();\n    const [lastUpdated, setLastUpdated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Main dashboard data query\n    const { data: dashboardData, isLoading: isDashboardLoading, isError: isDashboardError, error: dashboardError, refetch: refetchDashboard, isRefetching: isDashboardRefetching } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useQuery)({\n        queryKey: [\n            \"dashboard-data\"\n        ],\n        queryFn: async ()=>{\n            console.log(\"\\uD83D\\uDD04 useDashboardData: Executing dashboard query...\");\n            try {\n                const data = await _lib_dashboard_service__WEBPACK_IMPORTED_MODULE_1__.dashboardService.getDashboardData();\n                console.log(\"✅ useDashboardData: Dashboard data received:\", data);\n                setLastUpdated(new Date());\n                return data;\n            } catch (error) {\n                console.error(\"❌ useDashboardData: Dashboard query failed:\", error);\n                throw error;\n            }\n        },\n        refetchInterval,\n        enabled,\n        staleTime,\n        cacheTime,\n        retry: (failureCount, error)=>{\n            // Retry up to 3 times for network errors\n            if (failureCount < 3) {\n                const isNetworkError = error.message.includes(\"fetch\") || error.message.includes(\"network\");\n                return isNetworkError;\n            }\n            return false;\n        },\n        retryDelay: (attemptIndex)=>Math.min(1000 * 2 ** attemptIndex, 30000)\n    });\n    // Metrics query\n    const { data: metrics, isLoading: isMetricsLoading, isError: isMetricsError, error: metricsError, refetch: refetchMetricsQuery, isRefetching: isMetricsRefetching } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useQuery)({\n        queryKey: [\n            \"dashboard-metrics\"\n        ],\n        queryFn: ()=>_lib_dashboard_service__WEBPACK_IMPORTED_MODULE_1__.dashboardService.getMetrics(),\n        refetchInterval,\n        enabled,\n        staleTime,\n        cacheTime\n    });\n    // Activities query\n    const { data: activities, isLoading: isActivitiesLoading, isError: isActivitiesError, error: activitiesError, refetch: refetchActivitiesQuery, isRefetching: isActivitiesRefetching } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useQuery)({\n        queryKey: [\n            \"dashboard-activities\"\n        ],\n        queryFn: ()=>_lib_dashboard_service__WEBPACK_IMPORTED_MODULE_1__.dashboardService.getRecentActivities(),\n        refetchInterval,\n        enabled,\n        staleTime,\n        cacheTime\n    });\n    // System health query\n    const { data: systemHealth, isLoading: isSystemHealthLoading, isError: isSystemHealthError, error: systemHealthError, refetch: refetchSystemHealthQuery, isRefetching: isSystemHealthRefetching } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useQuery)({\n        queryKey: [\n            \"system-health\"\n        ],\n        queryFn: ()=>_lib_dashboard_service__WEBPACK_IMPORTED_MODULE_1__.dashboardService.getSystemStats(),\n        refetchInterval: refetchInterval / 2,\n        enabled,\n        staleTime: staleTime / 2,\n        cacheTime\n    });\n    // Combined loading state\n    const isLoading = isDashboardLoading || isMetricsLoading || isActivitiesLoading || isSystemHealthLoading;\n    // Combined error state\n    const isError = isDashboardError || isMetricsError || isActivitiesError || isSystemHealthError;\n    const error = dashboardError || metricsError || activitiesError || systemHealthError;\n    // Combined refetching state\n    const isRefetching = isDashboardRefetching || isMetricsRefetching || isActivitiesRefetching || isSystemHealthRefetching;\n    // Action handlers\n    const refetch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        await Promise.all([\n            refetchDashboard(),\n            refetchMetricsQuery(),\n            refetchActivitiesQuery(),\n            refetchSystemHealthQuery()\n        ]);\n    }, [\n        refetchDashboard,\n        refetchMetricsQuery,\n        refetchActivitiesQuery,\n        refetchSystemHealthQuery\n    ]);\n    const refetchMetrics = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        await refetchMetricsQuery();\n    }, [\n        refetchMetricsQuery\n    ]);\n    const refetchActivities = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        await refetchActivitiesQuery();\n    }, [\n        refetchActivitiesQuery\n    ]);\n    const refetchSystemHealth = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        await refetchSystemHealthQuery();\n    }, [\n        refetchSystemHealthQuery\n    ]);\n    const clearCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        queryClient.removeQueries({\n            queryKey: [\n                \"dashboard-data\"\n            ]\n        });\n        queryClient.removeQueries({\n            queryKey: [\n                \"dashboard-metrics\"\n            ]\n        });\n        queryClient.removeQueries({\n            queryKey: [\n                \"dashboard-activities\"\n            ]\n        });\n        queryClient.removeQueries({\n            queryKey: [\n                \"system-health\"\n            ]\n        });\n        _lib_dashboard_service__WEBPACK_IMPORTED_MODULE_1__.dashboardService.clearCache();\n    }, [\n        queryClient\n    ]);\n    const retry = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (isDashboardError) refetchDashboard();\n        if (isMetricsError) refetchMetricsQuery();\n        if (isActivitiesError) refetchActivitiesQuery();\n        if (isSystemHealthError) refetchSystemHealthQuery();\n    }, [\n        isDashboardError,\n        isMetricsError,\n        isActivitiesError,\n        isSystemHealthError,\n        refetchDashboard,\n        refetchMetricsQuery,\n        refetchActivitiesQuery,\n        refetchSystemHealthQuery\n    ]);\n    return {\n        // Data\n        data: dashboardData,\n        metrics,\n        activities,\n        systemHealth,\n        // States\n        isLoading,\n        isError,\n        error,\n        isRefetching,\n        lastUpdated,\n        // Actions\n        refetch,\n        refetchMetrics,\n        refetchActivities,\n        refetchSystemHealth,\n        clearCache,\n        retry\n    };\n}\n// Hook for handling connection status\nfunction useConnectionStatus() {\n    const [isOnline, setIsOnline] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(typeof navigator !== \"undefined\" ? navigator.onLine : true);\n    const [lastOnline, setLastOnline] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        const handleOnline = ()=>{\n            setIsOnline(true);\n            setLastOnline(new Date());\n        };\n        const handleOffline = ()=>{\n            setIsOnline(false);\n        };\n        window.addEventListener(\"online\", handleOnline);\n        window.addEventListener(\"offline\", handleOffline);\n        return ()=>{\n            window.removeEventListener(\"online\", handleOnline);\n            window.removeEventListener(\"offline\", handleOffline);\n        };\n    }, []);\n    return {\n        isOnline,\n        lastOnline,\n        isOffline: !isOnline\n    };\n}\n// Hook for API health monitoring\nfunction useAPIHealth() {\n    const { data: health, isLoading, error } = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useQuery)({\n        queryKey: [\n            \"api-health\"\n        ],\n        queryFn: ()=>_lib_dashboard_service__WEBPACK_IMPORTED_MODULE_1__.dashboardService.checkHealth(),\n        refetchInterval: 60000,\n        retry: false\n    });\n    return {\n        isHealthy: (health === null || health === void 0 ? void 0 : health.status) === \"healthy\",\n        responseTime: (health === null || health === void 0 ? void 0 : health.responseTime) || 0,\n        isLoading,\n        error\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/use-dashboard-data.ts\n"));

/***/ })

});