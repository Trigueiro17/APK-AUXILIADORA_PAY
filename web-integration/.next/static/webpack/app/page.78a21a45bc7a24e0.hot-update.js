"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/dashboard-service.ts":
/*!**************************************!*\
  !*** ./src/lib/dashboard-service.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dashboardService: function() { return /* binding */ dashboardService; },\n/* harmony export */   validateApiResponse: function() { return /* binding */ validateApiResponse; },\n/* harmony export */   validators: function() { return /* binding */ validators; }\n/* harmony export */ });\nclass DashboardService {\n    getCachedData(key) {\n        const cached = this.cache.get(key);\n        if (cached && Date.now() - cached.timestamp < this.CACHE_DURATION) {\n            return cached.data;\n        }\n        return null;\n    }\n    setCachedData(key, data) {\n        this.cache.set(key, {\n            data,\n            timestamp: Date.now()\n        });\n    }\n    /**\n   * Busca métricas agregadas do dashboard\n   */ async getMetrics() {\n        const cacheKey = \"dashboard-metrics\";\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const response = await fetch(\"/api/dashboard/metrics\");\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            this.setCachedData(cacheKey, data);\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching dashboard metrics:\", error);\n            // Retornar dados padrão em caso de erro\n            return {\n                totalSales: 0,\n                totalRevenue: 0,\n                dailyGoal: 0,\n                salesGrowth: 0,\n                revenueGrowth: 0,\n                goalProgress: 0\n            };\n        }\n    }\n    /**\n   * Busca dados para gráficos\n   */ async getChartData(type) {\n        let period = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"7d\";\n        const cacheKey = \"chart-\".concat(type, \"-\").concat(period);\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            var _data_charts;\n            const response = await fetch(\"/api/dashboard/charts?type=\".concat(type, \"&period=\").concat(period));\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            // Extrair os dados do gráfico da estrutura retornada\n            // A API retorna {charts: {sales: {...}}} então acessamos data.charts[type]\n            const chartData = ((_data_charts = data.charts) === null || _data_charts === void 0 ? void 0 : _data_charts[type]) || data;\n            this.setCachedData(cacheKey, chartData);\n            return chartData;\n        } catch (error) {\n            console.error(\"Error fetching chart data for \".concat(type, \":\"), error);\n            return null;\n        }\n    }\n    /**\n   * Busca atividades recentes\n   */ async getRecentActivities() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10, type = arguments.length > 1 ? arguments[1] : void 0;\n        const cacheKey = \"activities-\".concat(limit, \"-\").concat(type || \"all\");\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const params = new URLSearchParams({\n                limit: limit.toString()\n            });\n            if (type) params.append(\"type\", type);\n            const response = await fetch(\"/api/dashboard/recent-activities?\".concat(params));\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            this.setCachedData(cacheKey, data.activities || []);\n            return data.activities || [];\n        } catch (error) {\n            console.error(\"Error fetching recent activities:\", error);\n            return [];\n        }\n    }\n    /**\n   * Busca estatísticas do sistema\n   */ async getSystemStats() {\n        const cacheKey = \"system-stats\";\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const response = await fetch(\"/api/dashboard/stats\");\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            this.setCachedData(cacheKey, data);\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching system stats:\", error);\n            // Retornar dados padrão em caso de erro\n            return {\n                users: {\n                    total: 0,\n                    active: 0,\n                    inactive: 0\n                },\n                products: {\n                    total: 0,\n                    active: 0,\n                    inactive: 0\n                },\n                sales: {\n                    total: 0,\n                    today: 0,\n                    week: 0,\n                    thisMonth: 0\n                },\n                revenue: {\n                    total: 0,\n                    today: 0,\n                    week: 0,\n                    thisMonth: 0\n                },\n                system: {\n                    apiResponseTime: 0,\n                    errorRate: 0,\n                    syncStatus: \"error\",\n                    lastSync: new Date().toISOString()\n                }\n            };\n        }\n    }\n    /**\n   * Busca todos os dados do dashboard de uma vez usando o endpoint otimizado\n   */ async getDashboardData() {\n        console.log(\"\\uD83D\\uDD04 DashboardService: getDashboardData called\");\n        const cacheKey = \"complete-dashboard-data\";\n        const cached = this.getCachedData(cacheKey);\n        if (cached) {\n            console.log(\"\\uD83D\\uDCE6 DashboardService: Returning cached data:\", cached);\n            return cached;\n        }\n        try {\n            console.log(\"\\uD83C\\uDF10 DashboardService: Fetching from /api/dashboard\");\n            const response = await fetch(\"/api/dashboard\");\n            console.log(\"\\uD83D\\uDCE1 DashboardService: Response status:\", response.status);\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            console.log(\"✅ DashboardService: Data received:\", data);\n            // Cachear os dados por 30 segundos\n            this.setCachedData(cacheKey, data, 30000);\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching complete dashboard data:\", error);\n            // Fallback: tentar buscar dados individuais se o endpoint principal falhar\n            console.log(\"Falling back to individual API calls...\");\n            try {\n                const [metrics, stats, activities, salesChart, revenueChart, weeklyChart, paymentChart] = await Promise.allSettled([\n                    this.getMetrics(),\n                    this.getSystemStats(),\n                    this.getRecentActivities(10),\n                    this.getChartData(\"sales\", \"7d\"),\n                    this.getChartData(\"revenue\", \"7d\"),\n                    this.getChartData(\"weekly\", \"4w\"),\n                    this.getChartData(\"payment-methods\", \"30d\")\n                ]);\n                const fallbackData = {\n                    metrics: metrics.status === \"fulfilled\" ? metrics.value : {\n                        totalSales: 0,\n                        totalRevenue: 0,\n                        dailyGoal: 0,\n                        salesGrowth: 0,\n                        revenueGrowth: 0,\n                        goalProgress: 0\n                    },\n                    stats: stats.status === \"fulfilled\" ? stats.value : {\n                        users: {\n                            total: 0,\n                            active: 0,\n                            inactive: 0\n                        },\n                        products: {\n                            total: 0,\n                            active: 0,\n                            inactive: 0\n                        },\n                        sales: {\n                            total: 0,\n                            today: 0,\n                            week: 0,\n                            thisMonth: 0\n                        },\n                        revenue: {\n                            total: 0,\n                            today: 0,\n                            week: 0,\n                            thisMonth: 0\n                        },\n                        system: {\n                            apiResponseTime: 0,\n                            errorRate: 0,\n                            syncStatus: \"error\",\n                            lastSync: new Date().toISOString()\n                        }\n                    },\n                    activities: activities.status === \"fulfilled\" ? activities.value : [],\n                    charts: {\n                        sales: salesChart.status === \"fulfilled\" ? salesChart.value : null,\n                        revenue: revenueChart.status === \"fulfilled\" ? revenueChart.value : null,\n                        weekly: weeklyChart.status === \"fulfilled\" ? weeklyChart.value : null,\n                        paymentMethods: paymentChart.status === \"fulfilled\" ? paymentChart.value : null\n                    }\n                };\n                // Cachear dados do fallback por menos tempo (10 segundos)\n                this.setCachedData(cacheKey, fallbackData, 10000);\n                return fallbackData;\n            } catch (fallbackError) {\n                console.error(\"Fallback also failed:\", fallbackError);\n                throw error;\n            }\n        }\n    }\n    /**\n   * Limpa o cache\n   */ clearCache() {\n        this.cache.clear();\n    }\n    /**\n   * Força atualização dos dados (limpa cache e busca novos dados)\n   */ async refreshData() {\n        this.clearCache();\n        return this.getDashboardData();\n    }\n    /**\n   * Verifica a saúde da API\n   */ async checkApiHealth() {\n        const startTime = Date.now();\n        const errors = [];\n        try {\n            const response = await fetch(\"/api/health\");\n            const responseTime = Date.now() - startTime;\n            if (!response.ok) {\n                errors.push(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n                return {\n                    status: \"down\",\n                    responseTime,\n                    errors\n                };\n            }\n            const data = await response.json();\n            if (data.status === \"error\") {\n                errors.push(...data.errors || [\n                    \"Unknown API error\"\n                ]);\n                return {\n                    status: \"degraded\",\n                    responseTime,\n                    errors\n                };\n            }\n            return {\n                status: \"healthy\",\n                responseTime,\n                errors\n            };\n        } catch (error) {\n            const responseTime = Date.now() - startTime;\n            errors.push(error instanceof Error ? error.message : \"Network error\");\n            return {\n                status: \"down\",\n                responseTime,\n                errors\n            };\n        }\n    }\n    constructor(){\n        this.cache = new Map();\n        this.CACHE_DURATION = 5 * 60 * 1000 // 5 minutos\n        ;\n    }\n}\n// Instância singleton do serviço\nconst dashboardService = new DashboardService();\n// Função utilitária para validar dados da API\nfunction validateApiResponse(data, validator) {\n    try {\n        return validator(data) ? data : null;\n    } catch (e) {\n        return null;\n    }\n}\n// Validadores de tipo\nconst validators = {\n    isDashboardMetrics: (data)=>{\n        return typeof data === \"object\" && typeof data.totalSales === \"number\" && typeof data.totalRevenue === \"number\" && typeof data.dailyGoal === \"number\";\n    },\n    isChartDataPoint: (data)=>{\n        return typeof data === \"object\" && typeof data.date === \"string\" && typeof data.value === \"number\";\n    },\n    isActivityItem: (data)=>{\n        return typeof data === \"object\" && typeof data.id === \"string\" && typeof data.type === \"string\" && typeof data.title === \"string\" && typeof data.timestamp === \"string\";\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/dashboard-service.ts\n"));

/***/ })

});