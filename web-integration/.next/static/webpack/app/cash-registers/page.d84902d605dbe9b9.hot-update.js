"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/cash-registers/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; }\n/* harmony export */ });\nconst API_BASE_URL = \"/api\";\n// API Client\nclass ApiClient {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...options.headers\n            },\n            ...options\n        };\n        try {\n            const response = await fetch(url, config);\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"API request failed: \".concat(url), error);\n            throw error;\n        }\n    }\n    // Users API\n    async getUsers() {\n        return this.request(\"/users\");\n    }\n    async createUser(userData) {\n        return this.request(\"/users\", {\n            method: \"POST\",\n            body: JSON.stringify(userData)\n        });\n    }\n    async getUserById(id) {\n        return this.request(\"/users/\".concat(id));\n    }\n    async updateUser(id, userData) {\n        return this.request(\"/users/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(userData)\n        });\n    }\n    async deleteUser(id) {\n        return this.request(\"/users/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    // Products API\n    async getProducts(active) {\n        const query = active !== undefined ? \"?active=\".concat(active) : \"\";\n        return this.request(\"/products\".concat(query));\n    }\n    async createProduct(productData) {\n        return this.request(\"/products\", {\n            method: \"POST\",\n            body: JSON.stringify(productData)\n        });\n    }\n    async getProductById(id) {\n        return this.request(\"/products/\".concat(id));\n    }\n    async updateProduct(id, productData) {\n        return this.request(\"/products/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(productData)\n        });\n    }\n    async deleteProduct(id) {\n        return this.request(\"/products/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    // Cash Registers\n    async getCashRegisters(params) {\n        const queryParams = new URLSearchParams();\n        if (params === null || params === void 0 ? void 0 : params.status) queryParams.append(\"status\", params.status);\n        if (params === null || params === void 0 ? void 0 : params.userId) queryParams.append(\"userId\", params.userId);\n        const url = \"/cash-registers\".concat(queryParams.toString() ? \"?\".concat(queryParams.toString()) : \"\");\n        return this.request(url);\n    }\n    async getCashRegister(id) {\n        return this.request(\"/cash-registers/\".concat(id));\n    }\n    async createCashRegister(data) {\n        return this.request(\"/cash-registers\", {\n            method: \"POST\",\n            body: JSON.stringify(data)\n        });\n    }\n    async updateCashRegister(id, data) {\n        return this.request(\"/cash-registers/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(data)\n        });\n    }\n    async deleteCashRegister(id) {\n        return this.request(\"/cash-registers/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    // Sales API\n    async getSales(filters) {\n        const params = new URLSearchParams();\n        if (filters) {\n            Object.entries(filters).forEach((param)=>{\n                let [key, value] = param;\n                if (value) params.append(key, value);\n            });\n        }\n        const query = params.toString() ? \"?\".concat(params.toString()) : \"\";\n        return this.request(\"/sales\".concat(query));\n    }\n    async createSale(saleData) {\n        return this.request(\"/sales\", {\n            method: \"POST\",\n            body: JSON.stringify(saleData)\n        });\n    }\n    async getSaleById(id) {\n        return this.request(\"/sales/\".concat(id));\n    }\n    async updateSale(id, saleData) {\n        return this.request(\"/sales/\".concat(id), {\n            method: \"PUT\",\n            body: JSON.stringify(saleData)\n        });\n    }\n    async deleteSale(id) {\n        return this.request(\"/sales/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    constructor(baseUrl){\n        this.baseUrl = baseUrl;\n    }\n}\n// Export singleton instance\nconst apiClient = new ApiClient(API_BASE_URL);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});